'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStyleClasses = exports.getStyleImportNodeData = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fp = require('lodash/fp');

var _fp2 = _interopRequireDefault(_fp);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gonzalesPe = require('gonzales-pe');

var _gonzalesPe2 = _interopRequireDefault(_gonzalesPe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styleExtensionRegex = /\.s?css$/;

var getStyleImportNodeData = exports.getStyleImportNodeData = function getStyleImportNodeData(node) {
  // path from which it was imported
  var styleFilePath = _lodash2.default.get(node, 'source.value');

  if (styleFilePath && styleExtensionRegex.test(styleFilePath)) {
    var importNode = _fp2.default.compose(_fp2.default.first, _fp2.default.filter({ type: 'ImportDefaultSpecifier' }), _fp2.default.get('specifiers'))(node);

    // the default imported name
    var importName = _lodash2.default.get(importNode, 'local.name');

    if (importName) {
      // it had a default import
      return { importName: importName, styleFilePath: styleFilePath, importNode: importNode };
    }
  }
};

var getStyleClasses = exports.getStyleClasses = function getStyleClasses(filePath) {
  try {
    // check if file exists
    _fs2.default.statSync(filePath);
  } catch (e) {
    return {};
  }

  var fileContent = _fs2.default.readFileSync(filePath);

  var syntax = _path2.default.extname(filePath).slice(1); // remove leading .

  var ast = void 0;
  try {
    ast = _gonzalesPe2.default.parse(fileContent.toString(), { syntax: syntax });
  } catch (e) {
    // TODO: send message to tell about failure to parse css
    return null;
  }

  var ruleSets = [];

  ast.traverseByType('ruleset', function (node) {
    ruleSets.push(node);
  });

  var classNames = _fp2.default.compose(_fp2.default.map('content'), _fp2.default.filter({ type: 'ident' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'class' }), _fp2.default.flatMap('content'), _fp2.default.filter({ type: 'selector' }), _fp2.default.flatMap('content'))(ruleSets);

  // convert array to object, with all values undefined
  return _lodash2.default.zipObject(classNames);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb3JlL2luZGV4LmpzIl0sIm5hbWVzIjpbInN0eWxlRXh0ZW5zaW9uUmVnZXgiLCJnZXRTdHlsZUltcG9ydE5vZGVEYXRhIiwibm9kZSIsInN0eWxlRmlsZVBhdGgiLCJnZXQiLCJ0ZXN0IiwiaW1wb3J0Tm9kZSIsImNvbXBvc2UiLCJmaXJzdCIsImZpbHRlciIsInR5cGUiLCJpbXBvcnROYW1lIiwiZ2V0U3R5bGVDbGFzc2VzIiwiZmlsZVBhdGgiLCJzdGF0U3luYyIsImUiLCJmaWxlQ29udGVudCIsInJlYWRGaWxlU3luYyIsInN5bnRheCIsImV4dG5hbWUiLCJzbGljZSIsImFzdCIsInBhcnNlIiwidG9TdHJpbmciLCJydWxlU2V0cyIsInRyYXZlcnNlQnlUeXBlIiwicHVzaCIsImNsYXNzTmFtZXMiLCJtYXAiLCJmbGF0TWFwIiwiemlwT2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSUEsSUFBTUEsc0JBQXNCLFVBQTVCOztBQUVPLElBQU1DLDBEQUF5QixTQUF6QkEsc0JBQXlCLENBQUNDLElBQUQsRUFBMkI7QUFDL0Q7QUFDQSxNQUFNQyxnQkFBZ0IsaUJBQUVDLEdBQUYsQ0FBTUYsSUFBTixFQUFZLGNBQVosQ0FBdEI7O0FBRUEsTUFBSUMsaUJBQWlCSCxvQkFBb0JLLElBQXBCLENBQXlCRixhQUF6QixDQUFyQixFQUE4RDtBQUM1RCxRQUFNRyxhQUFhLGFBQUdDLE9BQUgsQ0FDakIsYUFBR0MsS0FEYyxFQUVqQixhQUFHQyxNQUFILENBQVUsRUFBRUMsTUFBTSx3QkFBUixFQUFWLENBRmlCLEVBR2pCLGFBQUdOLEdBQUgsQ0FBTyxZQUFQLENBSGlCLEVBSWpCRixJQUppQixDQUFuQjs7QUFNQTtBQUNBLFFBQU1TLGFBQWEsaUJBQUVQLEdBQUYsQ0FBTUUsVUFBTixFQUFrQixZQUFsQixDQUFuQjs7QUFFQSxRQUFJSyxVQUFKLEVBQWdCO0FBQUU7QUFDaEIsYUFBTyxFQUFFQSxzQkFBRixFQUFjUiw0QkFBZCxFQUE2Qkcsc0JBQTdCLEVBQVA7QUFDRDtBQUNGO0FBQ0YsQ0FsQk07O0FBb0JBLElBQU1NLDRDQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ0MsUUFBRCxFQUErQjtBQUM1RCxNQUFJO0FBQ0Y7QUFDQSxpQkFBR0MsUUFBSCxDQUFZRCxRQUFaO0FBQ0QsR0FIRCxDQUdFLE9BQU9FLENBQVAsRUFBVTtBQUNWLFdBQU8sRUFBUDtBQUNEOztBQUVELE1BQU1DLGNBQWMsYUFBR0MsWUFBSCxDQUFnQkosUUFBaEIsQ0FBcEI7O0FBRUEsTUFBTUssU0FBUyxlQUFLQyxPQUFMLENBQWFOLFFBQWIsRUFBdUJPLEtBQXZCLENBQTZCLENBQTdCLENBQWYsQ0FWNEQsQ0FVWjs7QUFFaEQsTUFBSUMsWUFBSjtBQUNBLE1BQUk7QUFDRkEsVUFBTSxxQkFBU0MsS0FBVCxDQUFlTixZQUFZTyxRQUFaLEVBQWYsRUFBdUMsRUFBRUwsY0FBRixFQUF2QyxDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9ILENBQVAsRUFBVTtBQUNWO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTVMsV0FBK0IsRUFBckM7O0FBRUFILE1BQUlJLGNBQUosQ0FBbUIsU0FBbkIsRUFBOEIsVUFBQ3ZCLElBQUQsRUFBVTtBQUN0Q3NCLGFBQVNFLElBQVQsQ0FBY3hCLElBQWQ7QUFDRCxHQUZEOztBQUlBLE1BQU15QixhQUE0QixhQUFHcEIsT0FBSCxDQUNoQyxhQUFHcUIsR0FBSCxDQUFPLFNBQVAsQ0FEZ0MsRUFFaEMsYUFBR25CLE1BQUgsQ0FBVSxFQUFFQyxNQUFNLE9BQVIsRUFBVixDQUZnQyxFQUdoQyxhQUFHbUIsT0FBSCxDQUFXLFNBQVgsQ0FIZ0MsRUFJaEMsYUFBR3BCLE1BQUgsQ0FBVSxFQUFFQyxNQUFNLE9BQVIsRUFBVixDQUpnQyxFQUtoQyxhQUFHbUIsT0FBSCxDQUFXLFNBQVgsQ0FMZ0MsRUFNaEMsYUFBR3BCLE1BQUgsQ0FBVSxFQUFFQyxNQUFNLFVBQVIsRUFBVixDQU5nQyxFQU9oQyxhQUFHbUIsT0FBSCxDQUFXLFNBQVgsQ0FQZ0MsRUFRaENMLFFBUmdDLENBQWxDOztBQVVBO0FBQ0EsU0FBTyxpQkFBRU0sU0FBRixDQUFZSCxVQUFaLENBQVA7QUFDRCxDQXRDTSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcCBmcm9tICdsb2Rhc2gvZnAnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBnb256YWxlcyBmcm9tICdnb256YWxlcy1wZSc7XG5cbmltcG9ydCB0eXBlIHsgSnNOb2RlLCBDc3NOb2RlVHlwZSB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3Qgc3R5bGVFeHRlbnNpb25SZWdleCA9IC9cXC5zP2NzcyQvO1xuXG5leHBvcnQgY29uc3QgZ2V0U3R5bGVJbXBvcnROb2RlRGF0YSA9IChub2RlOiBKc05vZGUpOiA/T2JqZWN0ID0+IHtcbiAgLy8gcGF0aCBmcm9tIHdoaWNoIGl0IHdhcyBpbXBvcnRlZFxuICBjb25zdCBzdHlsZUZpbGVQYXRoID0gXy5nZXQobm9kZSwgJ3NvdXJjZS52YWx1ZScpO1xuXG4gIGlmIChzdHlsZUZpbGVQYXRoICYmIHN0eWxlRXh0ZW5zaW9uUmVnZXgudGVzdChzdHlsZUZpbGVQYXRoKSkge1xuICAgIGNvbnN0IGltcG9ydE5vZGUgPSBmcC5jb21wb3NlKFxuICAgICAgZnAuZmlyc3QsXG4gICAgICBmcC5maWx0ZXIoeyB0eXBlOiAnSW1wb3J0RGVmYXVsdFNwZWNpZmllcicgfSksXG4gICAgICBmcC5nZXQoJ3NwZWNpZmllcnMnKSxcbiAgICApKG5vZGUpO1xuXG4gICAgLy8gdGhlIGRlZmF1bHQgaW1wb3J0ZWQgbmFtZVxuICAgIGNvbnN0IGltcG9ydE5hbWUgPSBfLmdldChpbXBvcnROb2RlLCAnbG9jYWwubmFtZScpO1xuXG4gICAgaWYgKGltcG9ydE5hbWUpIHsgLy8gaXQgaGFkIGEgZGVmYXVsdCBpbXBvcnRcbiAgICAgIHJldHVybiB7IGltcG9ydE5hbWUsIHN0eWxlRmlsZVBhdGgsIGltcG9ydE5vZGUgfTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdHlsZUNsYXNzZXMgPSAoZmlsZVBhdGg6IHN0cmluZyk6ID9PYmplY3QgPT4ge1xuICB0cnkge1xuICAgIC8vIGNoZWNrIGlmIGZpbGUgZXhpc3RzXG4gICAgZnMuc3RhdFN5bmMoZmlsZVBhdGgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgZmlsZUNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpO1xuXG4gIGNvbnN0IHN5bnRheCA9IHBhdGguZXh0bmFtZShmaWxlUGF0aCkuc2xpY2UoMSk7IC8vIHJlbW92ZSBsZWFkaW5nIC5cblxuICBsZXQgYXN0O1xuICB0cnkge1xuICAgIGFzdCA9IGdvbnphbGVzLnBhcnNlKGZpbGVDb250ZW50LnRvU3RyaW5nKCksIHsgc3ludGF4IH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVE9ETzogc2VuZCBtZXNzYWdlIHRvIHRlbGwgYWJvdXQgZmFpbHVyZSB0byBwYXJzZSBjc3NcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHJ1bGVTZXRzOiBBcnJheTxDc3NOb2RlVHlwZT4gPSBbXTtcblxuICBhc3QudHJhdmVyc2VCeVR5cGUoJ3J1bGVzZXQnLCAobm9kZSkgPT4ge1xuICAgIHJ1bGVTZXRzLnB1c2gobm9kZSk7XG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzTmFtZXM6IEFycmF5PHN0cmluZz4gPSBmcC5jb21wb3NlKFxuICAgIGZwLm1hcCgnY29udGVudCcpLFxuICAgIGZwLmZpbHRlcih7IHR5cGU6ICdpZGVudCcgfSksXG4gICAgZnAuZmxhdE1hcCgnY29udGVudCcpLFxuICAgIGZwLmZpbHRlcih7IHR5cGU6ICdjbGFzcycgfSksXG4gICAgZnAuZmxhdE1hcCgnY29udGVudCcpLFxuICAgIGZwLmZpbHRlcih7IHR5cGU6ICdzZWxlY3RvcicgfSksXG4gICAgZnAuZmxhdE1hcCgnY29udGVudCcpLFxuICApKHJ1bGVTZXRzKTtcblxuICAvLyBjb252ZXJ0IGFycmF5IHRvIG9iamVjdCwgd2l0aCBhbGwgdmFsdWVzIHVuZGVmaW5lZFxuICByZXR1cm4gXy56aXBPYmplY3QoY2xhc3NOYW1lcyk7XG59O1xuIl19